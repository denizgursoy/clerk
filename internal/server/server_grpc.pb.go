// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumerServiceClient is the client API for ConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerServiceClient interface {
	RegisterConsumer(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (ConsumerService_RegisterConsumerClient, error)
}

type consumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerServiceClient(cc grpc.ClientConnInterface) ConsumerServiceClient {
	return &consumerServiceClient{cc}
}

func (c *consumerServiceClient) RegisterConsumer(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (ConsumerService_RegisterConsumerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConsumerService_ServiceDesc.Streams[0], "/Server.ConsumerService/RegisterConsumer", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerServiceRegisterConsumerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConsumerService_RegisterConsumerClient interface {
	Recv() (*ConsumerResponse, error)
	grpc.ClientStream
}

type consumerServiceRegisterConsumerClient struct {
	grpc.ClientStream
}

func (x *consumerServiceRegisterConsumerClient) Recv() (*ConsumerResponse, error) {
	m := new(ConsumerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerServiceServer is the Server API for ConsumerService service.
// All implementations must embed UnimplementedConsumerServiceServer
// for forward compatibility
type ConsumerServiceServer interface {
	RegisterConsumer(*ConsumerRequest, ConsumerService_RegisterConsumerServer) error
	mustEmbedUnimplementedConsumerServiceServer()
}

// UnimplementedConsumerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerServiceServer struct {
}

func (UnimplementedConsumerServiceServer) RegisterConsumer(*ConsumerRequest, ConsumerService_RegisterConsumerServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterConsumer not implemented")
}
func (UnimplementedConsumerServiceServer) mustEmbedUnimplementedConsumerServiceServer() {}

// UnsafeConsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServiceServer will
// result in compilation errors.
type UnsafeConsumerServiceServer interface {
	mustEmbedUnimplementedConsumerServiceServer()
}

func RegisterConsumerServiceServer(s grpc.ServiceRegistrar, srv ConsumerServiceServer) {
	s.RegisterService(&ConsumerService_ServiceDesc, srv)
}

func _ConsumerService_RegisterConsumer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerServiceServer).RegisterConsumer(m, &consumerServiceRegisterConsumerServer{stream})
}

type ConsumerService_RegisterConsumerServer interface {
	Send(*ConsumerResponse) error
	grpc.ServerStream
}

type consumerServiceRegisterConsumerServer struct {
	grpc.ServerStream
}

func (x *consumerServiceRegisterConsumerServer) Send(m *ConsumerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConsumerService_ServiceDesc is the grpc.ServiceDesc for ConsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Server.ConsumerService",
	HandlerType: (*ConsumerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterConsumer",
			Handler:       _ConsumerService_RegisterConsumer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/Server/Server.proto",
}
