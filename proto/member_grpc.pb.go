// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	AddMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*Member, error)
	Listen(ctx context.Context, in *Member, opts ...grpc.CallOption) (MemberService_ListenClient, error)
	Ping(ctx context.Context, in *Member, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*empty.Empty, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) AddMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/MemberService/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Listen(ctx context.Context, in *Member, opts ...grpc.CallOption) (MemberService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &MemberService_ServiceDesc.Streams[0], "/MemberService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MemberService_ListenClient interface {
	Recv() (*Partition, error)
	grpc.ClientStream
}

type memberServiceListenClient struct {
	grpc.ClientStream
}

func (x *memberServiceListenClient) Recv() (*Partition, error) {
	m := new(Partition)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberServiceClient) Ping(ctx context.Context, in *Member, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MemberService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MemberService/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	AddMember(context.Context, *MemberRequest) (*Member, error)
	Listen(*Member, MemberService_ListenServer) error
	Ping(context.Context, *Member) (*empty.Empty, error)
	RemoveMember(context.Context, *Member) (*empty.Empty, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) AddMember(context.Context, *MemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedMemberServiceServer) Listen(*Member, MemberService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedMemberServiceServer) Ping(context.Context, *Member) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMemberServiceServer) RemoveMember(context.Context, *Member) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AddMember(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Member)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MemberServiceServer).Listen(m, &memberServiceListenServer{stream})
}

type MemberService_ListenServer interface {
	Send(*Partition) error
	grpc.ServerStream
}

type memberServiceListenServer struct {
	grpc.ServerStream
}

func (x *memberServiceListenServer) Send(m *Partition) error {
	return x.ServerStream.SendMsg(m)
}

func _MemberService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Ping(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMember",
			Handler:    _MemberService_AddMember_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MemberService_Ping_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _MemberService_RemoveMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _MemberService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/member.proto",
}
